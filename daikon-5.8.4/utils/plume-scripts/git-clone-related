#!/bin/sh

# git-clone-related:  clones a repository that is related to this one,
#   or pulls it if it has already been cloned.
#
# Sometimes, two repositories are related:  you need clones of both of them.
# When run from a clone of one (possibly in a fork and/or on a branch), this
# clones the other, attempting to find a matching fork and branch.
# This script also works in an Azure Pipelines, CircleCI, or Travis CI job.
#
# Usage:  git-clone-related [--debug] UPSTREAM_ORG REPO_NAME [DESTINATION] [GIT_ARGS...]
#   UPSTREAM_ORG is, if this is a fork, the parent organization.
#   REPO_NAME is the repository name without the organization.
#   DESTINATION is the new clone (not its parent), by default ../REPO .
#     If it exists, it is updated via "git pull", without changing its fork
#     or branch.  No error is issued if the pull fails.
#   GIT_ARGS is extra arguments to git clone.  It defaults to
#     "-q --single-branch --depth 1" (without the quotes).
#     It is not used if the destination already exists.
#
# When invoked from within a clone of MYORG/MYREPO, at branch MYBRANCH,
# this script first chooses the first of these that exists:
#   branch ${MYBRANCH} of https://github.com/${ORG}/${REPO_NAME}.git
#   branch ${MYBRANCH} of https://github.com/${UPSTREAM_ORG}/${REPO_NAME}.git
#   branch master of https://github.com/${UPSTREAM_ORG}/${REPO_NAME}.git
#
# Requires the `jq` program to be installed, when used in Azure Pipelines jobs.

# Fail if any command fails.
set +e

if [ "$#" -lt 2 ]; then
  echo "Usage: $0 UPSTREAM_ORG REPO [DESTINATION] [GIT_ARGS...]" >&2
  exit 1
fi

beginswith() { case $2 in "$1"*) true;; *) false;; esac; }

if [ "$1" = "--debug" ] ; then
  DEBUG=1
fi
UPSTREAM_ORG=$1; shift
REPO_NAME=$1; shift
if [ "$#" -ne 0 ] && ! beginswith "-" "$1"; then
  DESTINATION=$1; shift
  if [ -d "$DESTINATION" ] && [ "$(pwd -P)" = "$(cd "$DESTINATION"; pwd -P)" ]; then
    echo "git-clone-related: destination is same as current directory"
    exit 1
  fi
else
  if [ "${REPO_NAME}" = "${PWD##*/}" ]; then
    echo "git-clone-related: provide a destination argument"
    exit 1
  fi
  DESTINATION=../${REPO_NAME}
fi
if [ "$#" -eq 0 ]; then
  set -- -q --single-branch --depth 1
fi

echo "In directory $(pwd) :"
if [ -d "${DESTINATION}" ]; then
  echo "(cd ${DESTINATION} && git pull -q)"
  # Older versions of git don't support the -C command-line option.
  # In a Travis pull request, a repository can be in state "(HEAD detached at b475d58d)"
  # and "git pull" fails.
  (cd "${DESTINATION}" && (git pull -q || (git branch && true)))
else
  SCRIPTDIR="$(cd "$(dirname "$0")" && pwd -P)"

  if [ -n "$DEBUG" ] ; then
    "${SCRIPTDIR}/ci-info" --debug "${UPSTREAM_ORG}"
  fi

  eval "$("${SCRIPTDIR}"/ci-info "${UPSTREAM_ORG}")"
  UPSTREAM_REPO_URL="https://github.com/${UPSTREAM_ORG}/${REPO_NAME}.git"
  REPO_URL=$("${SCRIPTDIR}"/git-find-fork "${CI_ORGANIZATION}" "${UPSTREAM_ORG}" "${REPO_NAME}")
  # echo "git-find-fork ${CI_ORGANIZATION} ${UPSTREAM_ORG} ${REPO_NAME} => ${REPO_URL}"
  REPO_BRANCH=$("${SCRIPTDIR}"/git-find-branch "${REPO_URL}" "${CI_BRANCH_NAME}")
  # echo "git-find-branch ${REPO_URL} ${CI_BRANCH_NAME} => ${REPO_BRANCH}"
  if [ "$UPSTREAM_REPO_URL" != "$REPO_URL" ] && [ "$REPO_BRANCH" != "$CI_BRANCH_NAME" ] ; then
    ## Don't use branch master of the downstream repo
    REPO_URL="$UPSTREAM_REPO_URL"
  fi
  echo "git clone -b ${REPO_BRANCH} ${GIT_ARGS} ${REPO_URL} ${DESTINATION}"
  # Try twice in case of network lossage.
  git clone -b "${REPO_BRANCH}" "$@" "${REPO_URL}" "${DESTINATION}" \
    || git clone -b "${REPO_BRANCH}" "$@" "${REPO_URL}" "${DESTINATION}"
fi
echo "Done in directory ${DESTINATION} : $(cd "${DESTINATION}" && git rev-parse HEAD)"
